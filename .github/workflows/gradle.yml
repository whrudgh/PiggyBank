# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    # Configure Gradle for optimal use in GitHub Actions, including caching of downloaded dependencies.
    # See: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0

    - name: Ensure Gradlew is Executable
      run: chmod +x ./piggybank/gradlew

    - name: Build with Gradle Wrapper
      working-directory: ./piggybank
      run: ./gradlew clean build -x test

    - name: Check Build Artifacts
      run: ls -R ./piggybank/build/libs

    # NOTE: The Gradle Wrapper is the default and recommended way to run Gradle (https://docs.gradle.org/current/userguide/gradle_wrapper.html).
    # If your project does not have the Gradle Wrapper configured, you can use the following configuration to run Gradle with a specified version.
    #
    # - name: Setup Gradle
    #   uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0
    #   with:
    #     gradle-version: '8.9'
    #
    # - name: Build with Gradle 8.9
    #   run: gradle build

  dependency-submission:

    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    # Generates and submits a dependency graph, enabling Dependabot Alerts for all project dependencies.
    # See: https://github.com/gradle/actions/blob/main/dependency-submission/README.md
    # - name: Generate and submit dependency graph
    #   uses: gradle/actions/setup-gradle@v4
    #   with:
    #     gradle-version: '7.6'

    # - name: Generate and submit dependency graph
    #   uses: gradle/actions/dependency-submission@v4
    #   with:
    #     build-root-directory: ./piggybank
      
      #  Docker 이미지 빌드
    - name: docker image build
      run: docker build -f ./piggybank/Dockerfile -t ${{ secrets.DOCKERHUB_USERNAME }}/github-actions-test .

    #  DockerHub 로그인
    - name: docker login
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    #  Docker Hub 이미지 푸시
    - name: docker Hub push
      run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/github-actions-test

  # 위 과정에서 푸시한 이미지를 ec2에서 풀받아서 실행
  # run-docker-image-on-ec2:
  #   needs: build
  #   runs-on: self-hosted

  #   steps:
  #   - name: docker pull
  #     run : sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/github-actions-test

  #   - name: docker stop container
  #     run: |
  #       if [ $(sudo docker ps -a -q -f name=github-actions-test) ]; then
  #         sudo docker stop github-actions-test
  #       fi

  #   - name: docker run new container
  #     run: sudo docker run --rm -it -d -p 80:8080 --name github-actions-test ${{ secrets.DOCKERHUB_USERNAME }}/github-actions-test

  #   - name: delete old docker image
  #     run: sudo docker system prune -f
